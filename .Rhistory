cube <-function(x,n){
x^3
}
cub3(3)
cube(3)
x<-1:10
if(x>5){
x<-0
}
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
1：2-
1：20
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
req(0,times=40)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
ft<-(num_vect<1)
tf<-(num_vect<1)
info()
tf <- num_vect < 1
0 1 0 1
FALSE TRUE FALSE TRUE
TF
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char, "Yijing")
my_name
paste(my_name,collapse=" ")
paste("Helloe","world!",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3, c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11,bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- ("foo","bar","norf")
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnams <- c("patient","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
debug(ls)
ls
library(datasets)
data(iris)
?iris
head(iris)
library(datasets)
data(iris)
?iris
iris
s <- split(iris,iris$virginica)
s <- split(iris,iris$Species)
sapply(s,function(x),colMeans(x["Sepal.Length",]))
sapply(s,function(x) colMeans(x["Sepal.Length",]))
sapply(s,function(x) colMeans(x[c("Sepal.Length","Sepal.Width"), ]))
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(s[, 1:4], 2, mean)
apply(s, mean)
sapply(s,function(x),colMeans(x))
sapply(s,function(x) colMeans(x))
sapply(s,function(x) colMeans(x[c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]))
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
1
2
debug(lm)
lm
get <- function () x
## Put comments here that give an overall description of what your functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function () x
setmean <- function(mean) m << mean
getmean <- function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function () x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmean(m)
m
}
x <- matrix (1:4,2,2)
x
makeCacheMatrix(x)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
source("makeVector.R")
setwd("~/ProgrammingAssignment2")
source("makevector.R")
source("cachemean.R")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function () x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
a<-matrix(1:4,2,2)
a
a2<-makeCacheMatrix(a)
a2$get()
a2$getmatrix()
cacheSolve(a2)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(a2)
a2$getmatrix()
cacheSolve(a2)
a2$set(matrix(c(1,-5,0,0,1,0,0,0,1),3,3))
a2$getmatrix()
cacheSolve(a2)
cacheSolve(a2)
a2$get()
a2$setmatrix(matrix(c(1,-5,0,0,1,-5,-3,0,1),3,3))
a2$getmatrix()
a2$get()
cacheSolve(a2)
a<-makeCacheMatrix(matrix(c(1,-5,0,0,1,-5,-3,-5,-6),3,3))
a$get()
cacheSolve(a)
cacheSolve(a)
## Put comments here that give an overall description of what your functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function () x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached matrix")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
